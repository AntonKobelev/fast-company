import React, { useState } from "react";
import Users from "./components/users";
import api from "./api";

// главный компонент приложения App
function App() {
    // создаем хук useState для хранения состояния users, в качестве начального значения установим значение из index.js, в объекте API вызываем поле users - это user.api.js и из этого файла вызывается функция fetchAll() (извлечь всё - возращаем промис с юзерами)
    const [users, setUsers] = useState(api.users.fetchAll());

    // создаем функцию handleDelete (обработка удаления) передаем туда user Id
    const handleDelete = (userId) => {
        // устанавливаем новое значение users, проходим функцией filter по массиву, он возращает массив элементов, при условии что текущий элемент массива user не равен userId
        setUsers(users.filter((user) => user._id !== userId));
    };

    // создаем функцию обработка переключения закладки и передаем туда id
    const handleToggleBookMark = (id) => {
        // устанавливаем новое значение users,
        setUsers(
            // проходим функцией map, функция map создает новый массив
            users.map((user) => {
                // если у текущего элемента массива user._id равен id то
                if (user._id === id) {
                    // возвращается новый объект с измененным значением свойства bookmark, используем оператор spread (...) - это синтакис распыления объекта. ...user создает новый объект, который содержит все свойства и значения объекта user при этом свойство bookmark мы изменим
                    return { ...user, bookmark: !user.bookmark };
                }
                // если условие не сработало то функция возвращает исходный объект без изменений
                return user;
            })
        );
    };
    // возвращаем JSX (расширенный синтаксис JavaScript) - описание пользовательского интерфейса. Этот код отображает компонент Users с переданными свойствами, которые используются для отображения списка пользователей и обработки событий, которые могут произойти при взаимодействии пользователя с этим списком
    return (
        <div>
            {/* помещаем компонент Users, который принимает 3 свойства. onDelete и onToggleMark - это функции обратного вызова (- функция, которая передается в качестве аргумента другой функции и будет вызвана позже в процессе выполнения) они обработчики событий. Они будут вызываться, когда пользователь захочет удалить пользователя, или добавить закладку. users - это массив объектов, который мы передаем в компонент Users в качестве свойства */}
            <Users
                onDelete={handleDelete}
                onToggleBookMark={handleToggleBookMark}
                users={users}
            />
        </div>
    );
}

export default App;
